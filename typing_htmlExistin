<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>EduKids Typing Tutor — Years 1 & 2</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    :root{
      --navy:#07315a;
      --dark-orange:#fb852b;
      --muted-gray:#f3f4f6;
    }
    .slide-in { transform: translateX(0); transition: transform .28s ease; }
    .slide-out { transform: translateX(-110%); transition: transform .28s ease; }
    .kbd-key { min-width:36px; min-height:36px; display:inline-flex;align-items:center;justify-content:center;border-radius:6px;border:1px solid #e5e7eb;margin:2px;font-weight:700;background:white; user-select:none; }
    .kbd-key.home { background: #fff7ed; border-color: rgba(251,133,43,0.25); box-shadow: 0 6px 18px rgba(251,133,43,0.08); }
    .kbd-key.active { background:#ffedd5; transform: translateY(-3px); box-shadow:0 8px 24px rgba(11,49,90,0.06); }
    .char-correct { color:#166534; } /* green */
    .char-wrong { background:#fee2e2; color:#9b1c1c; }
    .chev { transition: transform .2s ease; }
    .encourage { color: var(--navy); font-weight:700; }
    .scroll-smooth { scroll-behavior: smooth; }
    /* small responsive fixes */
    @media (min-width: 768px) {
      #sidebar { position: relative; transform: none !important; width: auto; }
    }
  </style>
</head>
<body class="bg-white text-gray-900 font-sans min-h-screen">

  <!-- HEADER -->
  <header class="bg-[color:var(--navy)] text-white fixed top-0 left-0 right-0 z-40">
    <div class="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
      <div class="flex items-center gap-3">
        <button id="menuToggle" class="p-2 rounded-md bg-white/10 hover:bg-white/20 focus:ring-2 focus:ring-white" aria-label="Open menu">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16"/></svg>
        </button>
        <div class="flex items-center gap-3">
          <div class="w-12 h-12 rounded-full bg-[color:var(--dark-orange)] flex items-center justify-center font-bold text-white">KT</div>
          <div>
            <h1 class="text-lg font-bold">EduKids Typing Tutor</h1>
            <p class="text-xs opacity-90">Keyboard & Mouse drills — Year 1 & Year 2 sample</p>
          </div>
        </div>
      </div>

      <div class="flex items-center gap-3">
        <div class="text-sm px-3 py-1 rounded bg-white/10">Navy • Grey • Dark Orange</div>
      </div>
    </div>
  </header>

  <!-- LAYOUT -->
  <div class="pt-20 max-w-6xl mx-auto px-4 grid grid-cols-12 gap-6">
    <!-- SIDEBAR (slide-in) -->
    <aside id="sidebar" class="col-span-12 md:col-span-4 lg:col-span-3 fixed md:relative left-0 top-20 bottom-0 z-50 bg-gray-50 border-r p-4 overflow-auto slide-out w-[86vw] md:w-auto" aria-hidden="true">
      <div class="flex items-center justify-between mb-3">
        <h2 class="font-semibold text-[color:var(--navy)]">Lessons (Year 1 & 2)</h2>
        <button id="closeSidebar" class="md:hidden text-gray-600">Close</button>
      </div>

      <div id="sidebarContent" class="space-y-4 text-sm"></div>
    </aside>

    <!-- MAIN -->
    <main class="col-span-12 md:col-span-8 lg:col-span-9">
      <div id="pageContent" class="bg-white rounded-2xl shadow p-6 min-h-[60vh]">
        <!-- top controls: class select / practice type -->
        <div class="mb-4 grid grid-cols-1 md:grid-cols-3 gap-3 items-end">
          <div class="md:col-span-1">
            <label class="block text-sm text-gray-600 mb-1">Class</label>
            <select id="classSelect" class="w-full p-3 rounded border focus:ring-2 focus:ring-[color:var(--dark-orange)]">
              <option value="">Select Year</option>
            </select>
          </div>
          <div class="md:col-span-1">
            <label class="block text-sm text-gray-600 mb-1">Practice Type</label>
            <select id="practiceSelect" class="w-full p-3 rounded border focus:ring-2 focus:ring-[color:var(--dark-orange)]" disabled>
              <option value="">Choose practice</option>
              <option value="keyboard">Keyboard Drill</option>
              <option value="mouse">Mouse Practice</option>
            </select>
          </div>
          <div class="md:col-span-1">
            <label class="block text-sm text-gray-600 mb-1">Topic</label>
            <select id="topicSelect" class="w-full p-3 rounded border focus:ring-2 focus:ring-[color:var(--dark-orange)]" disabled>
              <option value="">Pick a topic</option>
            </select>
          </div>
        </div>

        <div class="mb-4">
          <button id="beginBtn" class="w-full hidden bg-[color:var(--dark-orange)] hover:bg-orange-500 text-white font-semibold py-3 rounded-lg shadow">Click here to begin training</button>
        </div>

        <!-- tutor area -->
        <section id="tutorArea" class="hidden">
          <div class="flex flex-col md:flex-row md:items-start md:justify-between gap-4">
            <div>
              <h2 id="topicTitle" class="text-2xl font-bold text-[color:var(--navy)]">Topic Title</h2>
              <p id="topicInfo" class="text-sm text-gray-600 mt-1"></p>
            </div>
            <div class="flex items-center gap-4">
              <div class="text-center">
                <div class="text-xs text-gray-500">Accuracy</div>
                <div id="acc" class="text-xl font-bold">0%</div>
              </div>
              <div class="text-center">
                <div class="text-xs text-gray-500">WPM</div>
                <div id="wpm" class="text-xl font-bold">0</div>
              </div>
              <div class="text-center">
                <div class="text-xs text-gray-500">Errors</div>
                <div id="errors" class="text-xl font-bold">0</div>
              </div>
              <div class="text-center">
                <div class="text-xs text-gray-500">Timer</div>
                <div id="timer" class="text-xl font-bold">—</div>
              </div>
            </div>
          </div>

          <div class="mt-4 bg-gray-100 rounded p-4 min-h-[140px]">
            <div id="instructionBox" class="text-sm text-[color:var(--navy)] font-medium mb-3"></div>
            <div id="sampleBox" class="text-2xl font-mono leading-relaxed break-words select-none"></div>
          </div>

          <textarea id="inputBox" class="mt-4 w-full p-3 rounded border border-gray-300 text-lg focus:ring-2 focus:ring-[color:var(--dark-orange)]" rows="4" placeholder="Start typing here..." disabled></textarea>

          <div class="mt-4 flex gap-2 items-center">
            <button id="prevBtn" class="px-4 py-2 bg-white border rounded hover:bg-gray-50" disabled>◀ Previous</button>
            <button id="nextBtn" class="px-4 py-2 bg-white border rounded hover:bg-gray-50 ml-auto" disabled>Next ▶</button>
            <button id="restartBtn" class="px-4 py-2 bg-white border rounded hover:bg-gray-50">Restart</button>
          </div>

          <!-- virtual keyboard (for keyboard drills) -->
          <div id="keyboardWrap" class="mt-6 bg-white border rounded p-4 hidden">
            <div class="text-sm text-gray-600 mb-2">On-screen Keyboard (home-row highlighted)</div>
            <div id="virtualKeyboard" class="flex flex-wrap"></div>
          </div>

          <div id="encourage" class="mt-4 text-sm encourage"></div>
        </section>
      </div>
    </main>
  </div>

  <!-- Embedded CLASSES JSON: Year 1 & 2 (from your data) -->
  <script>
  const CLASSES = {
    "classes": [
      {
        "id": "year1",
        "name": "Year 1",
        "terms": [
          {
            "number": 1,
            "title": "Term 1",
            "categories": [
              {
                "id": "keyboard",
                "name": "Keyboard",
                "topics": [
                  {
                    "title": "Home Row Keys",
                    "instruction": "Place your fingers on A S D F J K L ; and press each key when prompted.",
                    "samples": ["A","S","D","F","J","K","L",";"]
                  },
                  {
                    "title": "Two Letter Words",
                    "instruction": "Type simple two-letter words using home-row letters.",
                    "samples": ["AS","AD","FA","JK","KL"]
                  },
                  {
                    "title": "Three Letter Words",
                    "instruction": "Type these three-letter words slowly and correctly.",
                    "samples": ["CAT","DOG","SUN","HAT","FUN"]
                  }
                ]
              },
              {
                "id": "mouse",
                "name": "Mouse",
                "topics": [
                  {
                    "title": "Mouse Clicks",
                    "instruction": "Practice left click, right click, and double-click on targets.",
                    "samples": ["Left Click","Right Click","Double Click"]
                  },
                  {
                    "title": "Drag and Drop",
                    "instruction": "Drag small shapes to their matching outlines.",
                    "samples": ["Drag Circle","Drag Square","Drop Triangle"]
                  }
                ]
              }
            ]
          },
          {
            "number": 2,
            "title": "Term 2",
            "categories": [
              {
                "id": "keyboard",
                "name": "Keyboard",
                "topics": [
                  {
                    "title": "Simple Words",
                    "instruction": "Type these simple 3–4 letter words clearly.",
                    "samples": ["BIRD","FISH","TREE","STAR","BALL"]
                  },
                  {
                    "title": "Common Sentences",
                    "instruction": "Type each sentence exactly as shown, including spaces.",
                    "samples": ["I am happy","You are good","We like to play","It is sunny","I can run"]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "id": "year2",
        "name": "Year 2",
        "terms": [
          {
            "number": 1,
            "title": "Term 1",
            "categories": [
              {
                "id": "keyboard",
                "name": "Keyboard",
                "topics": [
                  {
                    "title": "Home Row Drill",
                    "instruction": "Repeat the home row letters, build speed and accuracy.",
                    "samples": ["A","S","D","F","J","K","L",";"]
                  },
                  {
                    "title": "Two & Three Letter Words",
                    "instruction": "Type mixed 2–3 letter words using the home row.",
                    "samples": ["AND","SAD","FUN","JAM","LAD"]
                  },
                  {
                    "title": "Five Short Words",
                    "instruction": "Type these five short words clearly.",
                    "samples": ["MAP","PEN","CUP","RAT","BAG"]
                  }
                ]
              },
              {
                "id": "mouse",
                "name": "Mouse",
                "topics": [
                  {
                    "title": "Precision Clicks",
                    "instruction": "Click accurately on small targets, practice double-click speed.",
                    "samples": ["Left Click","Double Click","Right Click"]
                  }
                ]
              }
            ]
          },
          {
            "number": 2,
            "title": "Term 2",
            "categories": [
              {
                "id": "keyboard",
                "name": "Keyboard",
                "topics": [
                  {
                    "title": "Typing Short Sentences",
                    "instruction": "Type short sentences, paying attention to capitalization and spacing.",
                    "samples": ["I like cake","You are nice","We play together","She can sing","He has a ball"]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  };
  </script>

  <!-- App JS -->
  <script>
  (function(){
    // Shortcuts
    const $ = (sel, root=document) => root.querySelector(sel);
    const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));

    // DOM refs
    const menuToggle = $('#menuToggle');
    const sidebar = $('#sidebar');
    const closeSidebar = $('#closeSidebar');
    const sidebarContent = $('#sidebarContent');
    const classSelect = $('#classSelect');
    const practiceSelect = $('#practiceSelect');
    const topicSelect = $('#topicSelect');
    const beginBtn = $('#beginBtn');
    const tutorArea = $('#tutorArea');
    const topicTitle = $('#topicTitle');
    const topicInfo = $('#topicInfo');
    const instructionBox = $('#instructionBox');
    const sampleBox = $('#sampleBox');
    const inputBox = $('#inputBox');
    const prevBtn = $('#prevBtn');
    const nextBtn = $('#nextBtn');
    const restartBtn = $('#restartBtn');
    const keyboardWrap = $('#keyboardWrap');
    const virtualKeyboard = $('#virtualKeyboard');
    const acc = $('#acc');
    const wpm = $('#wpm');
    const errors = $('#errors');
    const timerEl = $('#timer');
    const encourage = $('#encourage');

    // state
    let sidebarOpen = false;
    function setSidebar(open){
      sidebarOpen = open;
      if(open){
        sidebar.classList.remove('slide-out'); sidebar.classList.add('slide-in'); sidebar.setAttribute('aria-hidden','false');
      } else {
        sidebar.classList.remove('slide-in'); sidebar.classList.add('slide-out'); sidebar.setAttribute('aria-hidden','true');
      }
    }
    setSidebar(false);

    menuToggle.addEventListener('click', ()=> setSidebar(!sidebarOpen));
    closeSidebar.addEventListener('click', ()=> setSidebar(false));

    const classes = CLASSES.classes || [];

    // populate class select
    function initClassSelect(){
      classes.forEach(c => {
        const op = document.createElement('option');
        op.value = c.id; op.textContent = c.name;
        classSelect.appendChild(op);
      });
    }
    initClassSelect();

    // build sidebar (nested)
    function buildSidebar(){
      sidebarContent.innerHTML = '';
      classes.forEach(c => {
        const yr = document.createElement('div'); yr.className = 'mb-4';
        const head = document.createElement('button');
        head.className = 'w-full flex items-center justify-between px-2 py-2 rounded hover:bg-[color:var(--muted-gray)]';
        head.innerHTML = `<span class="font-semibold">${c.name}</span><svg class="w-4 h-4 chev" viewBox="0 0 24 24"><path d="M6 9l6 6 6-6" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`;
        yr.appendChild(head);

        const yrBody = document.createElement('div'); yrBody.className = 'pl-3 mt-2 hidden';
        c.terms.forEach(t => {
          const tHead = document.createElement('button');
          tHead.className = 'w-full text-left px-2 py-1 rounded hover:bg-[color:var(--muted-gray)] text-sm text-blue-700';
          tHead.innerHTML = `<span class="font-medium">${t.title}</span><svg class="w-3 h-3 chev inline-block ml-2" viewBox="0 0 24 24"><path d="M6 9l6 6 6-6" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`;
          yrBody.appendChild(tHead);

          const tBody = document.createElement('div'); tBody.className = 'pl-3 mt-1 hidden';
          t.categories.forEach(cat => {
            const cHead = document.createElement('button');
            cHead.className = 'w-full text-left px-2 py-1 rounded hover:bg-[color:var(--muted-gray)] text-sm text-purple-600';
            cHead.textContent = cat.name;
            tBody.appendChild(cHead);

            const catBody = document.createElement('div'); catBody.className = 'pl-3 mt-1 hidden';
            const ul = document.createElement('ul'); ul.className = 'space-y-1';
            cat.topics.forEach((topic, idx) => {
              const li = document.createElement('li');
              const a = document.createElement('button');
              a.className = 'w-full text-left px-2 py-1 rounded hover:bg-white text-sm';
              a.textContent = topic.title;
              a.addEventListener('click', () => {
                // set selectors to same selection (for quick start)
                classSelect.value = c.id; onClassChange();
                practiceSelect.value = cat.id; onPracticeChange();
                // pick the matching option in topicSelect
                for (let i=0;i<topicSelect.options.length;i++){
                  if (topicSelect.options[i].dataset.title === topic.title) { topicSelect.selectedIndex = i; break; }
                }
                beginBtn.classList.remove('hidden');
                setSidebar(false);
                encourage.textContent = '';
              });
              li.appendChild(a); ul.appendChild(li);
            });
            catBody.appendChild(ul);
            tBody.appendChild(catBody);

            cHead.addEventListener('click', ()=> {
              const open = catBody.classList.contains('hidden');
              tBody.querySelectorAll(':scope > div').forEach(d=> d.classList.add('hidden'));
              if (open) catBody.classList.remove('hidden');
            });
          });

          tHead.addEventListener('click', ()=> {
            const open = tBody.classList.contains('hidden');
            yrBody.querySelectorAll(':scope > div').forEach(d=> d.classList.add('hidden'));
            if (open) tBody.classList.remove('hidden');
          });

        });
        head.addEventListener('click', ()=> {
          const open = yrBody.classList.contains('hidden');
          sidebarContent.querySelectorAll(':scope > div > div.pl-3').forEach(d => d.classList.add('hidden'));
          if (open) yrBody.classList.remove('hidden');
        });

        yr.appendChild(yrBody);
        sidebarContent.appendChild(yr);
      });
    }
    buildSidebar();

    // when class changes
    function onClassChange(){
      const cId = classSelect.value;
      practiceSelect.disabled = !cId;
      topicSelect.disabled = true;
      topicSelect.innerHTML = '<option value="">Pick a topic</option>';
      beginBtn.classList.add('hidden');
      tutorArea.classList.add('hidden');
      keyboardWrap.classList.add('hidden');
      encourage.textContent = '';
      if (!cId) return;
      // enable practice types available
      const cls = classes.find(x=>x.id===cId);
      const types = new Set();
      (cls.terms||[]).forEach(t => (t.categories||[]).forEach(cat => types.add(cat.id)));
      $$('option', practiceSelect).forEach(opt => {
        if (!opt.value) return;
        opt.disabled = !types.has(opt.value);
        opt.hidden = !types.has(opt.value);
      });
      practiceSelect.value = '';
    }
    classSelect.addEventListener('change', onClassChange);

    // when practice type changes
    function onPracticeChange(){
      const cId = classSelect.value;
      const type = practiceSelect.value;
      topicSelect.innerHTML = '<option value="">Pick a topic</option>';
      topicSelect.disabled = true;
      beginBtn.classList.add('hidden');
      tutorArea.classList.add('hidden');
      keyboardWrap.classList.add('hidden');
      encourage.textContent = '';
      if (!cId || !type) return;
      const cls = classes.find(x=>x.id===cId);
      (cls.terms||[]).forEach(t => {
        (t.categories||[]).forEach(cat => {
          if (cat.id === type) {
            (cat.topics||[]).forEach((topic, idx) => {
              const op = document.createElement('option');
              op.value = JSON.stringify({term: t.number, cat: cat.id, idx});
              op.textContent = `${t.title} • ${cat.name} • ${topic.title}`;
              op.dataset.title = topic.title;
              topicSelect.appendChild(op);
            });
          }
        });
      });
      topicSelect.disabled = false;
    }
    practiceSelect.addEventListener('change', onPracticeChange);

    // virtual keyboard build
    const KB_LAYOUT = [
      ['`','1','2','3','4','5','6','7','8','9','0','-','=','Back'],
      ['Tab','q','w','e','r','t','y','u','i','o','p','[',']','\\'],
      ['Caps','a','s','d','f','g','h','j','k','l',';','\'','Enter'],
      ['Shift','z','x','c','v','b','n','m',',','.','/','Shift']
    ];
    function buildVirtualKeyboard(){
      virtualKeyboard.innerHTML = '';
      KB_LAYOUT.forEach(row=>{
        const rowDiv = document.createElement('div');
        rowDiv.className = 'mb-2';
        row.forEach(k=>{
          const key = document.createElement('div');
          key.className = 'kbd-key';
          key.dataset.key = (k.length === 1)? k.toLowerCase() : k.toLowerCase();
          key.textContent = k;
          if (['a','s','d','f','j','k','l',';'].includes((k+'').toLowerCase())) key.classList.add('home');
          rowDiv.appendChild(key);
        });
        virtualKeyboard.appendChild(rowDiv);
      });
    }
    buildVirtualKeyboard();

    // practice state
    let currentSamples = [], curIndex = 0;
    let correctChars = 0, typedChars = 0, startTime = null;
    let timed = false, timerID = null, timerSeconds = 0, timerEnd = null;

    function resetStats(){
      correctChars = 0; typedChars = 0; startTime = null;
      acc.textContent = '0%'; wpm.textContent = '0'; errors.textContent = '0';
      timerEl.textContent = '—'; encourage.textContent = '';
      if (timerID) { clearInterval(timerID); timerID = null; }
    }

    function formatTime(s){ return `${String(Math.floor(s/60)).padStart(2,'0')}:${String(s%60).padStart(2,'0')}`; }

    // get selected topic object
    function getSelectedTopic(){
      const sel = topicSelect.value;
      if (!sel) return null;
      const parsed = JSON.parse(sel);
      const cId = classSelect.value;
      const cls = classes.find(x=>x.id===cId);
      const term = cls.terms.find(t=>t.number===parsed.term);
      const cat = term.categories.find(cc=>cc.id===parsed.cat);
      const topic = cat.topics[parsed.idx];
      return { cls, term, cat, topic, idx: parsed.idx };
    }

    // detect timed minutes in topic text
    function detectTimedMinutes(topic){
      const text = (topic.title || '') + ' ' + (topic.instruction || '');
      const m = text.match(/(\d{1,2})\s*(min|minute|minutes|min\))/i);
      if (m) return parseInt(m[1],10);
      if (/timed/i.test(text) && /5/.test(text)) return 5;
      return 0;
    }

    // render current sample
    function renderSample(){
      const s = currentSamples[curIndex] || '';
      sampleBox.innerHTML = '';
      for (let i=0;i<s.length;i++){
        const sp = document.createElement('span');
        sp.textContent = s[i];
        sp.dataset.pos = i;
        sampleBox.appendChild(sp);
      }
      inputBox.value = ''; inputBox.disabled = false; inputBox.focus();
      updateNavButtons();
    }

    function updateNavButtons(){
      prevBtn.disabled = curIndex <= 0;
      nextBtn.disabled = curIndex >= currentSamples.length - 1;
    }

    // keyboard visual
    function keyVisual(k){
      const key = virtualKeyboard.querySelector(`.kbd-key[data-key="${(k+'').toLowerCase()}"]`);
      if (key) {
        key.classList.add('active');
        setTimeout(()=> key.classList.remove('active'), 150);
      }
    }

    function charMatch(a,b){
      if (!a && !b) return true;
      if (!a || !b) return false;
      if (/[a-zA-Z]/.test(a) && /[a-zA-Z]/.test(b)) return a.toLowerCase() === b.toLowerCase();
      return a === b;
    }

    // compute stats
    function computeStats(){
      const accPct = typedChars ? Math.round((correctChars/typedChars)*100) : 0;
      acc.textContent = accPct + '%';
      const elapsedMinutes = startTime ? ((Date.now() - startTime)/1000/60) : 0;
      const words = Math.max(0, Math.round((correctChars/5)));
      const curWpm = elapsedMinutes > 0 ? Math.round(words / elapsedMinutes) : 0;
      wpm.textContent = curWpm;
      errors.textContent = Math.max(0, typedChars - correctChars);
    }

    // input handler
    inputBox.addEventListener('input', ()=> {
      if (!startTime) startTime = Date.now();
      const val = inputBox.value;
      // update typedChars as total length including earlier samples
      const completedLen = currentSamples.slice(0,curIndex).join('').length;
      typedChars = completedLen + val.length;
      // update spans
      const spans = sampleBox.querySelectorAll('span');
      let correctNow = 0;
      for (let i=0;i<spans.length;i++){
        const expected = spans[i].textContent;
        const got = val[i] || '';
        if (got === '') { spans[i].classList.remove('char-correct','char-wrong'); }
        else if (charMatch(got, expected)) { spans[i].classList.add('char-correct'); spans[i].classList.remove('char-wrong'); correctNow++; }
        else { spans[i].classList.add('char-wrong'); spans[i].classList.remove('char-correct'); }
      }
      // completed samples count as correct
      const completedCorrect = currentSamples.slice(0,curIndex).reduce((acc,s)=> acc + s.length, 0);
      correctChars = completedCorrect + correctNow;
      computeStats();
      // visual key
      if (val.length) keyVisual(val[val.length-1]);
      // check if current sample fully matched
      const curText = currentSamples[curIndex] || '';
      let allMatch = true;
      for (let i=0;i<curText.length;i++){
        if (!charMatch(val[i]||'', curText[i])) { allMatch = false; break; }
      }
      if (val.length >= curText.length && allMatch) {
        setTimeout(()=> {
          sampleBox.querySelectorAll('span').forEach(sp=> { sp.classList.remove('char-wrong'); sp.classList.add('char-correct'); });
          if (curIndex < currentSamples.length - 1) { curIndex++; renderSample(); encourage.textContent = randomEncouragement(true); }
          else { inputBox.disabled = true; encourage.textContent = '🎉 Topic complete — great work!'; }
        }, 160);
      }
    });

    // physical keyboard highlight
    document.addEventListener('keydown', (e)=> {
      keyVisual(e.key);
    });

    // begin training
    beginBtn.addEventListener('click', ()=> {
      const sel = getSelectedTopic();
      if (!sel) return alert('Select a class, practice type and topic first.');
      const topic = sel.topic;
      // prepare samples
      currentSamples = (topic.samples || []).slice();
      // build progressive extra steps heuristically:
      const shortWords = currentSamples.filter(s=> s.length <=3 && !s.includes(' '));
      if (shortWords.length >= 2) {
        currentSamples.push(shortWords.join(' '), shortWords.slice().reverse().join(' '));
      }
      const sentences = currentSamples.filter(s=> s.includes(' ') || s.includes('.') || s.includes(','));
      if (sentences.length >= 2) currentSamples.push(sentences.join(' '));

      curIndex = 0;
      resetStats();
      // timed?
      const mins = detectTimedMinutes(topic);
      if (mins>0) { timed = true; timerSeconds = mins*60; timerEl.textContent = formatTime(timerSeconds); } else { timed=false; timerEl.textContent='—'; }
      // show UI
      tutorArea.classList.remove('hidden');
      instructionBox.textContent = topic.instruction || '';
      topicTitle.textContent = topic.title;
      topicInfo.textContent = `${sel.cls.name} • ${sel.term.title} • ${sel.cat.name}`;
      renderSample();
      // show keyboard for keyboard category
      if (sel.cat.id === 'keyboard') keyboardWrap.classList.remove('hidden'); else keyboardWrap.classList.add('hidden');
      beginBtn.classList.add('hidden');
      encourage.textContent = 'Go on — start typing when ready!';
      // start timer on first keystroke if timed (handled in input)
    });

    prevBtn.addEventListener('click', ()=> { if (curIndex>0) { curIndex--; renderSample(); encourage.textContent='Try again — you got this!'; } });
    nextBtn.addEventListener('click', ()=> { if (curIndex < currentSamples.length - 1) { curIndex++; renderSample(); encourage.textContent='Nice — next!'; } });
    restartBtn.addEventListener('click', ()=> { resetStats(); curIndex=0; renderSample(); encourage.textContent='Restarted — take your time.'; if (timerID) { clearInterval(timerID); timerID=null; } });

    // utility encouragement
    function randomEncouragement(success){
      const good = ['Nice!', 'Great job!', 'Keep it up!', 'You’re improving!', 'Awesome!'];
      const tryAgain = ['Almost!', 'Try again — you can do it!', 'Keep practicing!', 'One more time!'];
      return success ? good[Math.floor(Math.random()*good.length)] : tryAgain[Math.floor(Math.random()*tryAgain.length)];
    }

    // initialize
    buildSidebar();
    initClassSelect();

    // small keyboard accessibility: pressing Enter on selects shows begin button
    topicSelect.addEventListener('change', ()=> { beginBtn.classList.toggle('hidden', !topicSelect.value); });

    // expose for debugging
    window._CLASSES = CLASSES;

  })();
  </script>

</body>
</html>
